10 性能优化

查看系统配置 stats
// 由于案例是Linux操作系统 没有应用

10.1 服务器硬件:
    影响数据库性能的硬件因素有: CPU 磁盘 内存 网络

    磁盘:    I/O吞吐量
            SATA SSD 和 PCIe SSD 固态磁盘
            企业级SSD > 消费级SSD

    外部存储设备: SAN设备(存储区域网络)   使用块接口访问 与访问磁盘类似
                NAS设备(网络接入存储)   使用标准文件协议访问
                (特性: 需要考虑网络通信响应时长)

10.2 操作系统优化:
    10.2.1 Lunix性能工具
        1. top(进程及其内存) (man top)
        2. free(内存) (buffers 磁盘缓冲区 cache 磁盘读出缓存)
            释放缓存命令:
                sync
                echo 1 > /proc/sys/vm/drop_caches
        3.  vmstat
            命令: vm [delay] [count] (每几秒采样1次 / 共采样几次)

        4. iostat  (磁盘输入输出监控)(也可以查看:系统 适配器 tty设备 磁盘 cd_rom输入/输出统计 )
            iostat -dx /dev/dfa [delay] [count]
            (返回统计信息中 r=>read w=>write util=>利用率 rq-sz=>队列大小 qu-sz=>队列长度 rqm=reqqinguest_mount 请求数)

        5. mpstat CPU的详细性能

        6. sar 性能统计很重要的工具 配置在/etc/cron.d/sysstat中 默认10分钟
                (1) 汇总cpu
                    sar -q
                (2) 汇总 I/O
                    sar -b
                (3) 历史数据
                    历史保存在/var/log/sa中
                    sar -q -f /var/log/sa/sal5 s 22:00:00 -e 23:00:00
                    保存天数配置在 /etc/sysconfig/sysstat  HISTORY

        7. 其他:
            mnon 图形界面的top
            iotop 观察I/O的top
            系统查进程:
                -D 不可中断的睡眠状态
                -R 可执行状态
                -S 可中断的睡眠状态
                -T 暂停/追踪状态
                -X dead退出 进程及姜小虎
                -Z 退出 进程为僵尸进程
            代码: for x  in `seq 3`; do ps -eo state,pid,cmd | grep "^D"; echo "--"; sleep 5;done;
                while true; do date; ps auxf | awk '{if($8=="D" print $0;}';

    10.2.2 Linux 系统的I/O调度算法
            查看系统支持的调度算法: dmesg | grep -i scheduler
            4种调度算法:
                noop 电梯调度 基于FIFO队列 先进后出 适合SSD 不关注响应时间
                cfq 绝对公平调度算法 为每个进程和县城单独创建队列管理IO 均匀分布IO带宽 适合通用服务器 是linux默认调度算法
                deadline 绝对保障算法 为读写分别创建FIFO队列 内核收到请求时 尝试合并 不能合并则排序或放入队列 尽量在请求达到截止期限前调度
                        适合虚拟机所在的宿主机器IO压力大时用 (适用场景: 数据库服务器)
               anticipatory 未介绍

               shell命令可临时修改调度算法 服务器重启后会恢复到系统默认值 永久修改要/etc/grub.conf

    10.2.3 预读参数调整
            概述: 设置预读磁盘扇区 扇区内的数据通过内存预读
            查看预读扇区: /sbin/blockdev --getra /dev/sda
            设置扇区 /sbin/blockdev --setra 16384 /dev/sda
                    echo 16384 /sys/block/sda/queue/read_ahead_kb
                    防止重启失效的设置: 写入rc.local
                    echo "/sbin/blockdev --setra 16384 /dev/dfa /dev/sdal" >> /etc/rc.local

    10.2.4 内存的优化

        1. swap: 将长时间不用的程序释放物理内存 运行当前进程
        OOM:out of memory内存溢出

        系统将虚拟内存写入磁盘交换 但数据库还在内存中找数据

        应对方法: 如果数据库写数据用到swap 则在有内存可用时释放swap( 先禁用swap 在打开swap )

        2. 透明大页Trasparent HugePages
            作用: 动态分配内存
            缺点: 运行时 内存分派会延误
            建议: 关闭透明大页

           查看透明大页的配置: cat /sys/kernel/mm/trasparent_hugepage/enabled (kernal 操作系统核心)
            关闭:   echo never  /sys/kernel/mm/trasparent_hugepage/enabled

            永久关闭透明大页 方法1
                if test -f /sys/kernel/mm/transparent_hugepage/enabled; then
                    echo never > /sys/kernel/mm/transparent_hugepage/enabled
                fi
                if test -f /sys/kernel/mm/transparent_hugepage/defrag; then (整理磁盘碎片)
                    echo never > /sys/kernel/mm/transparent_huge/enabled
                fi

            永久关闭透明大页 方法2
                /etc/grub.conf kernel 行末加上transparent_hugepage=never


10.3数据库优化
10.3.1 全局参数调整
    postgrsql.conf配置文件参数:
        shared_buffers    共享内存 默认128kB
        work mem          内存数量
        random_page_cost  随机访问磁盘块代价
                          如果使用机械磁盘 这个参数不影响查询计划
                          如果服务器使用固态磁盘 建议其设置的币seq_page_cost大一点 比如1.5

        流程:
        数据库开启->分配共享内存(无论有没有请求 都一直保持固定大小)(shared_buffers)->接收请求->在shared_buffers查找
        ->↗️找到了 直接返回
          ↘️找不到 服务进程操作系统请求请求数据-> 数据从磁盘加载

        work men 不足时 服务进程会使用磁盘临时文件 使排序和hash性能严重下降
                    检查方法: 排序时有Top-N heapsort, Quik sork, External merge这几种方法
                    查询计划中如果使用了external merge 就是使用了磁盘临时文件 需要增加work_men值

10.3.2 统计信息 查询计划

    系统表: pg_stat 或 pg_statio打头
        内容: 支撑数据库系统内部方法的决策数据 例如合适运行autovavvum 如何解释查询计划 保存在pg_statistics中 超级管理员可以用

    1. 表名: pg_stat_database:

        numbackends: 后端数(并发连接数 理论上控制在cpu核数*1.5个)
        blks_read blks_hit  读取磁盘块次数 块的缓存命中数
        xact_commit xact_rollback: 提交回滚事务数
        deadlocks 上次pg_stat_reset以来死锁数

    2.表名: pg_stat_user_tables
        last_vacuum last_analyze 最后一次在此表上手动执行vacuum和analyze的时间

        last_autovacuum,last_autoanalyze 最后一次再次表上被autovacuum守护进程执行autovacuum和analyze的时间

    3. pg_stat_statements
        create extension pg_stat_statements; // 启用

    4. 查看sql执行计划:
        执行计划 即 查询计划 显示用什么方法扫描表
        扫描方法2种: 顺序扫描 索引扫描
        查看执行计划: EXPLAIN 关键字
        查看真是的查询计划分析: ALALYZE 关键字

        使用ALALYZE COSTS BUFFERS TIMING(??) FORMAT VERBOSE选项输出详细的查询计划:

        EXPLAIN (ANALYZE on, TIMING on , VERBOSE on, BUFFERS on) SELECT * FROM tbl WHERE id=10;

    高度的需求 使用session级别的log_xxx_stats判断查询效果:

    第一组:log_parser_stats log_planner_stats

    第二组: log_statement_stats

    两组参数不能同时设置为on

    设置方法:
    set client_min_messages = log;
    set log_parser_stats = on;
    set log_planner_stats = on;
    set log_statement_stats = off;

    第一组:
    分4个展示查询log集
       parse statistics
       parse analysis statistics
       rewriter statistics
       planner statistics

    第二组:
        query statistics

10.3.3 索引管理与维护

    postgresql 索引类型:
        B-tree hash GiST GIN BRIN Bloom

        B-tree 最常见 适合于包含多个 组成值 的数据值 如数组
        GiST 是通用的索引接口 可以使用GiST实现B-Tree R-tree等索引结构

        除了hash Bloom以外 以上都适用多列索引

        postgresQL还支持: 唯一索引 表达式索引 部分索引 多列索引



